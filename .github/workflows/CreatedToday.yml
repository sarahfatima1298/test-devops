 # This workflow uses ServiceNow custom actions that are certified by ServiceNow.


name: CreateChangeToday
on: workflow_dispatch
  # push:
  #  branches:  ["main" ]
  # pull_request: 
  #   branches: [ "main" ]
  #   types: [opened, synchronize,reopened]

# on:
#   schedule:
#     - cron: '*/2 * * * *'

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest 

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean compile

  test:
    name: 'Test'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4.0.0
        
    - name: Run Tests with Maven
      run: mvn -B test --file pom.xml

    # - name: ServiceNow DevOps Unit Test Results
    # # # You may pin to the exact commit or the version.

    #   uses: ServiceNow/servicenow-devops-test-report@dev
    #   with:
                  # devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
                  # devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
                  # devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
    #               instance-url: ${{ secrets.SN_INSTANCE_URL }}
    #               tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
    #               # Job Name
    #               job-name: 'Test' # Should be same name as declared in 'name' clause of the current Stage
    #               # Github Context
    #               context-github: ${{ toJSON(github) }}
    #               # XUnit xml report file name with path
    #               xml-report-filename: CTestFolder/CTest.xml
    # - name: ServiceNow DevOps Unit Test Results            
    #   uses: ServiceNow/servicenow-devops-test-report@dev
    #   with:
    #       # Devops Integration Token
    #       devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
    #       # devops-integration-user-name: '${{ secrets.SN_DEVOPS_USER }}'
    #       # devops-integration-user-password: '${{ secrets.SN_DEVOPS_PASSWORD }}'
    #       # ServiceNow Instance Name
    #       instance-url: ${{ secrets.SN_INSTANCE_URL }}
    #       # Orchestration Tool Id
    #       tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
    #       # Job Name
    #       job-name: 'Test' # Should be same name as declared in 'name' clause of the current Stage
    #       # Github Context
    #       context-github: ${{ toJSON(github) }}
    #       # JUnit xml report file name with path
    #       xml-report-filename: target/ #if only JUnit tests, use target/surefire-reports/testng-results.xml
    #       # if both JUnit & TestNG tests, use target/surefire-reports/testng-junit-results/testng-results.xml

   

  # registerArtifact:
  #   name: 'RegisterArtifact'
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: ServiceNow DevOps Register Artifact
  #   # You may pin to the exact commit or the version.          
  #     uses: ServiceNow/servicenow-devops-register-artifact@dev
  #     with:
  #         # devops-integration-user-name: '${{ secrets.SN_DEVOPS_USER }}'
  #         # devops-integration-user-password: '${{ secrets.SN_DEVOPS_PASSWORD }}'
  #         # Devops Integration Token
  #         devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
  #         # ServiceNow Instance URL
  #         instance-url: ${{ secrets.SN_INSTANCE_URL }}
  #         # Orchestration Tool Id
  #         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #         # Display Name of the Job
  #         job-name: 'Register Artifact'
  #         # Github Context
  #         context-github: ${{ toJSON(github) }}
  #         # List of Artifacts to be registered
  #         artifacts: '[
  #            {
  #                 "name": "app-devops-cicd.jar",
  #                 "version": "1.${{ github.run_number }}",
  #                 "semanticVersion": "1.${{ github.run_number }}.0",
  #                 "repositoryName": "${{ github.repository }}"
  #             }
  #          ]'

  sonarScan:
   name: 'Sonar Scan'
   needs: test
   runs-on: ubuntu-latest
   steps:
   - name: Checkout
     uses: actions/checkout@v4.0.0
  
   - name: ServiceNow DevOps Sonar Scan Results
   # You may pin to the exact commit or the version.     
     uses: ServiceNow/servicenow-devops-sonar@dev
     with:
         # ServiceNow Instance URL
         instance-url: ${{ secrets.SN_INSTANCE_URL }}
         # Devops Integration Token
         # devops-integration-user-name: '${{ secrets.SN_DEVOPS_USER }}'
         # devops-integration-user-password: '${{ secrets.SN_DEVOPS_PASSWORD }}'
         devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
         # Orchestration Tool Id
         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
         # Github Context
         context-github: ${{ toJSON(github) }}
         # Display Name of the Job
         job-name: 'Sonar Scan'
         # Sonar Host URL
         sonar-host-url: ${{ secrets.SONAR_URL }}
         # Sonar Project Key
         sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}

  # ServiceNowSecurityScanResults:
  #   # type of machine to run the job on
  #   runs-on: ubuntu-latest
  #   name: ServiceNow Security Scan Results
  #   needs: sonarScan
  #   steps:
  #     - name: ServiceNow DevOps Security Results
  #       uses: ServiceNow/servicenow-devops-security-result@v3.1.0
  #       with:
  #           # DevOps Integration Token of GitHub tool created in ServiceNow instance for token based authentication.
  #           devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
  #           # devops-integration-user-name: '${{ secrets.SN_DEVOPS_USER }}'
  #           # devops-integration-user-password: '${{ secrets.SN_DEVOPS_PASSWORD }}'
  #           # ServiceNow Instance URL
  #           instance-url: ${{ secrets.SN_INSTANCE_URL }}
  #           # Orchestration Tool Id
  #           tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #           # GitHub Context
  #           context-github: ${{ toJSON(github) }}
  #           # Display Name of the Job
  #           job-name: 'ServiceNow Security Scan Results'
  #           security-result-attributes: '{"scanner": "Veracode", "applicationName": "10kflaws-72"}'
  #           scanner: Scanning tool and is required e.g. Veracode.
  #           applicationName: Name of your Veracode application and is required. This attribute is applicable only for Veracode.
  #           buildVersion: Veracode Scan name /build version and is optional. This attribute is applicable only for Veracode.
  #           securityToolId: Security tool onboarded in ServiceNow (sys_id of the onboarded security tool) and is optional.

  # registerPackage:
  #   name: 'Register Package'
  #   needs: [registerArtifact]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: ServiceNow DevOps Register Package
  #   # You may pin to the exact commit or the version.           
  #     uses: ServiceNow/servicenow-devops-register-package@dev
  #     with:
  #         # Devops Integration Token
  #         # devops-integration-user-name: '${{ secrets.SN_DEVOPS_USER }}'
  #         # devops-integration-user-password: '${{ secrets.SN_DEVOPS_PASSWORD }}'
  #         devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
  #         # ServiceNow Instance URL
  #         instance-url: ${{ secrets.SN_INSTANCE_URL }}
  #         # Orchestration Tool Id of the tool created in ServiceNow
  #         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #         # Github Context
  #         context-github: ${{ toJSON(github) }}
  #         # List of Artifacts in JSON format
  #         artifacts: '[
  #             {
  #                 "name": "app-devops-cicd.jar",
  #                 "version": "1.${{ github.run_number }}",
  #                 "semanticVersion": "1.${{ github.run_number }}.0",
  #                 "repositoryName": "${{ github.repository }}"
  #             }
  #          ]'
  #         # Name of the Package that contains list of artifacts
  #         package-name: 'app-devops-change-velocity-cicd.war'
  #         # Display Name of Job
  #         job-name: 'Register Package'

  change:
    name: Change Request
    needs: sonarScan
    runs-on: ubuntu-latest
    steps:     
      - name: ServiceNow DevOps Change Attributes
        # uses: ServiceNow/servicenow-devops-change@dev
        uses: ServiceNow/servicenow-devops-change@dev
        with:
          # devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          # devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Change Request'
          change-request: '{"setCloseCode":"true","attributes":{"short_description":"Automated Software Deployment","chg_model":"007c4001c343101035ae3f52c1d3aeb2","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
          interval: '100'
          timeout: '3600'
          # deployment-gate: '{"environment":"prod","jobName":"Deploy"}'
        
  # deploy:
  #   name: 'Deploy'
  #   needs: sonarScan
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   steps:
  #     - name: Run deployment scripts
  #       run: echo Completed Deployment. 

  # getchange:
  #   # jobs that  must complete successfully before this job will run
  #   needs: change
  #   # type of machine to run the job on
  #   runs-on: ubuntu-latest
  #   name: 'ServiceNow DevOps Get Change'
  #   outputs:
  #     change-request-number: ${{ steps.get_change.outputs.change-request-number }}
  #   steps:
  #     - name: ServiceNow DevOps Get Change
  #       # You may pin to the exact commit or the version.
  #       # uses: ServiceNow/servicenow-devops-get-change@0f8b1914adeaec764a4286bdd9cba73ed1c6097f
  #       uses: ServiceNow/servicenow-devops-get-change@dev
  #       id: get_change
  #       with:
  #         # ServiceNow Instance URL
  #         instance-url: ${{ secrets.SN_INSTANCE_URL }}
  #         # Devops Integration Token
  #         devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
  #         # devops-integration-user-name: '${{ secrets.SN_DEVOPS_USER }}'
  #         # devops-integration-user-password: '${{ secrets.SN_DEVOPS_PASSWORD }}'
  #         # Orchestration Tool Id
  #         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #         # Github Context
  #         context-github: ${{ toJSON(github) }}
  #         # The inputs to identify change at Servicenow and GET it.
  #         change-details: '{"build_number":"","pipeline_name":"","stage_name":"Deploy"}'

      # - name: Output of ServiceNow DevOps Get Change
      #   run: echo 'Output of ServiceNow DevOps Get Change is -> change-request-number = ${{ steps.get_change.outputs.change-request-number }}' >> $GITHUB_OUTPUT

  # updatechange:
  #   # jobs that must complete successfully before this job will run
  #   needs: getchange
  #   # type of machine to run the job on
  #   runs-on: ubuntu-latest
  #   name: 'ServiceNow DevOps Update Change'
  #   steps:
  #     - name: ServiceNow DevOps Update Change
  #       # You may pin to the exact commit or the version.
  #       # uses: ServiceNow/servicenow-devops-update-change@66d51cb13684d8287a763bc3f4dc4531c6ab3306
  #       uses: ServiceNow/servicenow-devops-update-change@dev
  #       id: update_change
  #       with:
  #         # ServiceNow Instance URL
  #         instance-url: ${{ secrets.SN_INSTANCE_URL }}
  #         # ServiceNow Devops security token
  #         devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
  #         # devops-integration-user-name: '${{ secrets.SN_DEVOPS_USER }}'
  #         # devops-integration-user-password: '${{ secrets.SN_DEVOPS_PASSWORD }}'
  #         # Orchestration Tool Id of the tool created in ServiceNow
  #         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #         # Github Context
  #         context-github: ${{ toJSON(github) }}
  #         # Change Request Number to be Updated
  #         change-request-number: ${{needs.getchange.outputs.change-request-number}}
  #         # The customized inputs to create change with the requested details.
  #         change-request-details: '{"state":"3","close_code":"successful_issues","close_notes":"Test results successful"}'
          
      # - name: Outcome of ServiceNow DevOps Update Change
      #   run: echo 'Outcome of ServiceNow DevOps Update Change is -> ${{ steps.update_change.outputs.status }}'  >> $GITHUB_OUTPUT       
